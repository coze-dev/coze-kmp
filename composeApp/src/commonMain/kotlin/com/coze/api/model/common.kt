package com.coze.api.model

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 * Message role type
 */
@Serializable
enum class RoleType {
    @SerialName("user")
    USER,
    @SerialName("assistant")
    ASSISTANT
}

/**
 * Message content type
 */
@Serializable
enum class ContentType {
    @SerialName("text")
    TEXT,
    @SerialName("image")
    IMAGE,
    @SerialName("audio")
    AUDIO,
    @SerialName("video")
    VIDEO,
    @SerialName("object_string")
    OBJECT_STRING,
    @SerialName("card")
    CARD
}

/**
 * Message type
 */
@Serializable
enum class MessageType {
    @SerialName("question")
    QUESTION,
    @SerialName("answer")
    ANSWER,
    @SerialName("function_call")
    FUNCTION_CALL,
    @SerialName("tool_output")
    TOOL_OUTPUT,
    @SerialName("tool_response")
    TOOL_RESPONSE,
    @SerialName("follow_up")
    FOLLOW_UP,
    @SerialName("verbose")
    VERBOSE
}

/**
 * Chat status
 */
@Serializable
enum class ChatStatus {
    @SerialName("created")
    CREATED,
    @SerialName("in_progress")
    IN_PROGRESS,
    @SerialName("completed")
    COMPLETED,
    @SerialName("failed")
    FAILED,
    @SerialName("requires_action")
    REQUIRES_ACTION,
    @SerialName("canceled")
    CANCELED
}

/**
 * Object string item for structured content
 */
@Serializable
data class ObjectStringItem(
    val type: String,
    val text: String
)

/**
 * Usage information
 */
@Serializable
data class Usage(
    @SerialName("token_count")
    val tokenCount: Int,
    @SerialName("output_count")
    val outputCount: Int,
    @SerialName("input_count")
    val inputCount: Int
)

/**
 * Simple message for request
 */
@Serializable
data class EnterMessage(
    val role: RoleType,
    val content: String? = null,
    @SerialName("content_type")
    var contentType: ContentType? = ContentType.TEXT,
    @SerialName("meta_data")
    val metaData: Map<String, String>? = null,
    @SerialName("type")
    val type: String? = null
)

/**
 * Base message information
 * 
 * @property id Message ID, which is the unique identifier of the message.
 * @property conversationId The ID of the conversation that contains this message.
 * @property botId The Bot ID that writes this message. This parameter is only returned in messages generated by the conversation.
 * @property chatId Chat ID. This parameter is only returned in messages generated by the conversation.
 * @property metaData The additional message when creating a message, which will also be returned when getting a message.
 * @property role The entity that sends this message (user/assistant).
 * @property content The content of the message, supports plain text, multimodal (text, image, file mixed input), and card types.
 * @property contentType The type of the message content (text/object_string/card).
 * @property createdAt The creation time of the message, formatted as a 10-digit Unix timestamp, in seconds (s).
 * @property updatedAt The update time of the message, formatted as a 10-digit Unix timestamp, in seconds (s).
 * @property type Message type.
 */
@Serializable
data class ChatV3Message(
    val id: String,
    @SerialName("conversation_id")
    val conversationId: String,
    @SerialName("bot_id")
    val botId: String,
    @SerialName("chat_id")
    val chatId: String? = null,
    @SerialName("meta_data")
    val metaData: Map<String, String>? = null,
    val role: RoleType,
    val content: String,
    @SerialName("content_type")
    val contentType: ContentType,
    @SerialName("created_at")
    val createdAt: Long? = null,
    @SerialName("updated_at")
    val updatedAt: Long? = null,
    val type: MessageType? = null,
    val status: String? = null,
    val usage: Usage? = null,
    @SerialName("last_error")
    val lastError: ErrorData? = ErrorData(0, "")
)
